//This was quit a long interview of about 1.5 hrs. Overall discussion was good 
//and interviewer tried to know about my understanding around datastructures such as LinkedList, BinaryTree.
//Solutions below are not complete or fully running one as definitely these kind of data structures need 
//some prior code for handling these data structures and their behaviour.



/*
Create a linked list with an integer.

*/

import java.io.*;
import java.util.*;

class LinkedListNode{

  int val;
  LinkedListNode next;
  
  
  
  public LinkedListNode(int x){
  
    this.val = x;
    this.next = null;
  }
  
  
  public void add(int x){
  
    LinkedListNode temp = this;
    
    if(head==null){
      temp = new LinkedListNode(x);
    }else{
      while(temp.next!=null){
        temp=temp.next;
      }
      LinkedListNode n = new LinkedListNode(x);
      temp.next=n;
    }
    
    //return head;
  }
  
  public void add(int[] x){
  
    LinkedListNode temp = this;
    
    if(head==null){
      temp = new LinkedListNode(x);
    }else{
      while(temp.next!=null){
        temp=temp.next;
      }
      
      for(int i=0; i<x.length; i++){
        LinkedListNode n = new LinkedListNode(x);
        temp.next=n;
        temp=temp.next;
      }
    }
    
    //return head;
  }
  
  
  
  public boolean remove(int x){
  
    (this==null || this.size()<x){
      return false;
    }
    
    LinkedListNode prev = this;
    LinkedListNode next = this;
    
    while(x>=0){
      next = next.next;
    }
    
    while(next.next!=null){
      prev=prev.next;
      next=next.next;
    }
    
    prev.next=prev.next.next;
    return true;
  
  }
  
  int size(){
    
  }

}

class solution{
  public static void main(String[] args){

    LinkedListNode head = new LinkedListNode(1);

    int[] arr = {2,3,4,5};

    //for(int i=0; i < arr.length; i++){
      head.add(arr);
    //}


    head.remove(2); // remove the 2nd last node from linked list
    head.remove(3); // remove the 3rd last node
    
    
    //BinaryTree
    
    int[] arr1 = {1,2,3,4,5,6,7};
    
    BinaryTreeNode root = new BinaryTreeNode(1);
    BinaryTreeNode temp = root;
    root.left = new BinaryTreeNode(2);
    root.right = new BinaryTreeNode(3);
    
    root=root.left;
    root.left = new BinaryTreeNode(4);
    root.right = new BinaryTreeNode(5);
    
    root=root.right;
    root.left = new BinaryTreeNode(6);
    root.right = new BinaryTreeNode(7);
    root=temp;
    
    
    

  }
  
  
  static BinaryTreeNode LCA(BinaryTreeNode root, int va1, int val2){
  
    if(root==null){
      
      return root;
      
    }else{
    
      ArrayList<BinaryTreeNode> val1List = new ArrayList<BinaryTreeNode>();
      ArrayList<BinaryTreeNode> val2List = new ArrayList<BinaryTreeNode>();
      
      val1List=findPath(val1List, root, val1);
      val2List=findPath(val2List, root, val2);
      
      Collections.reverse(val1List); // 2,1
      Collections.reverse(val2List); // 4,2,1
      
      HashSet<BinaryTreeNode> mySet = new HashSet<BinaryTreeNode>();
      
      for(int i=0; i<val1List.size(); i++){
        mySet.add(val1List.get(i));
      }
      
      for(int i=0; i<val2List.size(); i++){
        if(mySet.contains(val2List.get(i)){
          return val2List.get(i);
        }
      }
      
      /*
      for(int i=0; i<val1List.size(); i++){
        for(int j=0; j<val2List.size(); j++){
          if(val1List.get(i)==val2List.get(i)){
          
            return val1List.get(i);
          }
        }
      }*/
           
    }
    
    return null;
  }
           
 // BTN(4)-> 2 -> 5 -> 1 -> 6 -> 3 -> 7          
  /*
   Brute force : create a linked list from inorder traversal and iterate over the list and update right and left pointers.
  
  */
}



class BinaryTreeNode{

  int val;
  
  BinarTreeNode left;
  BinaryTreeNode right;
  
  public BinaryTreeNode(int x){
    this.val = x;
    this.left = null;
    this.right = null;
  }

}









// Final Telephonic Interview on PIG

/*
Question 1:

Sales person file

c
1   Abe     61  140000
2   Bob     34  44000
5   Chris   34  40000
7   Dan     41  52000
8   Ken     57  115000
11  Joe     38  38000


Customer File

ID  Name        City    Industry Type
4   Samsonic    pleasant    J
6   Panasung    oaktown     J
7   Samony      jackson     B
9   Orange      Jackson     B


Orders file

Number  order_date  cust_id salesperson_id  Amount
10       8/2/96      4           2           540
20      1/30/99      4           8           1800
30      7/14/95      9           1           460
40      1/29/98      7           2           2400
50      2/3/98       6           7           600
60      3/2/98       6           7           720
70      5/6/98       9           7           150


Write a pig script to generate and store
a. The names of all salespeople that have an order with Samsonic.
b. The names of all salespeople that do not have any order with Samsonic.
c. The names of salespeople that have 2 or more orders.
d. find the largest order amount for each salesperson and the associated order number, along with the customer to whom that order belongs to.
e. if a salesperson gets 1% commission on day's highest sell, .5% on second highest sell, .1% on remaining, please generate total income earned by each salesperson in a year.






*/
ASSSUMPTION: 
1) files are in same directory



order = LOAD 'order.txt' AS (Number:int,  order_date:chararray,   cust_id:int, salesperson_id:int,  Amount:int);
customer = LOAD 'customer.txt' AS (ID:int,  Name:chararray,        City:chararray,    Industry Type:chararray);
sales = LOAD 'sales.txt' AS (ID:int,  Name:chararray,    Age:int, Salary:int);




samsonicOrder = filter order by cust_id != 4;

salesID = foreach samsonicOrder generate salesperson_id;

answer = Join sales by ID, salesID by salesperson_id;

finalAnswer = foreach answer generate name; 

dump finalAnswer;




+++variation (We do not want to hardcode the customer id )

Question => pig -p name=Samsonic test.pig

order = LOAD 'order.txt' AS (Number:int,  order_date:chararray,   cust_id:int, salesperson_id:int,  Amount:int);
customer = LOAD 'customer.txt' AS (ID:int,  Name:chararray,        City:chararray,    Industry Type:chararray);
sales = LOAD 'sales.txt' AS (ID:int,  Name:chararray,    Age:int, Salary:int);

filteredID = filter customer by name = $name;



//myOrder = filter order by cust_id != filteredID;

myOrder = join order by cust_id, filteredID by id;

salesID = foreach myOrder generate salesperson_id;

answer = Join sales by ID, salesID by salesperson_id;

finalAnswer = foreach answer generate name; 

dump finalAnswer;




c)
order = LOAD 'order.txt' AS (Number:int,  order_date:chararray,   cust_id:int, salesperson_id:int,  Amount:int);
customer = LOAD 'customer.txt' AS (ID:int,  Name:chararray,        City:chararray,    Industry Type:chararray);
sales = LOAD 'sales.txt' AS (ID:int,  Name:chararray,    Age:int, Salary:int);

myGroup = group order by salesperson_id;

// myGroup : Bag{group:chararray, order:bag{Number:int,  order_date:chararray,   cust_id:int, salesperson_id:int,  Amount:int}}

myCount = foreach myGroup generate salesperson_id, count(order) as countOfRecords;

myResult = filter myCount by countOfRecords > 1;

myJoin = Join myResult by salesperson_id, sales by id;

finalAnswer = foreach myJoin generate name; 

dump finalAnswer;
